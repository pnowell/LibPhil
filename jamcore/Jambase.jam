## ================================================================================================
## Utility functions
## ================================================================================================

## ================================================================================================
## General case search and replace within a string
## ================================================================================================
rule SearchReplace {
    ## -- name all the arguments
    local STRINGS = $(1) ;
    local PATTERN = $(2) ;
    local REPLACE = $(3) ;

    local RESULT ;
    for STRING in $(STRINGS) {
        while true {
            local MATCHRESULT = [ MATCH "(.*)($(PATTERN))(.*)" : $(STRING) ] ;
            if ! $(MATCHRESULT) { break ; }
            STRING = $(MATCHRESULT[1])$(REPLACE)$(MATCHRESULT[3]) ;
        }
        RESULT += $(STRING) ;
    }

    return $(RESULT) ;
}

## ================================================================================================
## Fix a path string according to our standards
## ================================================================================================
rule FixPath {
    ## -- name the arguments
    local RESULT = $(1) ;

    ## -- make sure we use forward slashes instead of backslashes
    RESULT = [ SearchReplace $(RESULT) : "\\\\" : "/" ] ;

    ## -- make sure the drive letter is lower case
    local MATCHRESULT = [ MATCH "^([A-Z]:/)(.*)" : $(RESULT) ] ;
    if $(MATCHRESULT) { RESULT = $(MATCHRESULT[1]:L)$(MATCHRESULT[2]) ; }
    return $(RESULT) ;
}

## ================================================================================================
## Return the relative path of the first absolute path relative to the second
## ================================================================================================
rule MakeRelative {
    ## -- name the arguments
    local PATH = $(1) ;
    local BASE = $(2) ;

    return [ SearchReplace $(PATH) : $(BASE)/ : "" ] ;
}

## ================================================================================================
## Subtract the elements from the second list from the first
## ================================================================================================
rule ListSubtract {
    ## -- name the arguments
    local LIST = $(1) ;
    local TOSUBTRACT = $(2) ;

    local RESULTS ;
    for CAND in $(LIST) {
        if ! ( $(CAND) in $(TOSUBTRACT) ) {
            RESULTS += $(CAND) ;
        }
    }

    return $(RESULTS) ;
}

## ================================================================================================
## Merge the two lists making sure to avoid repeat elements
## ================================================================================================
rule ListMerge {
    local RESULTS = $(1) ;
    for CURR in $(2) {
        if ! ( $(CURR) in $(1) ) {
            RESULTS += $(CURR) ;
        }
    }
    return $(RESULTS) ;
}

## ================================================================================================
## Fix up some environment variables
## ================================================================================================
LIBPHIL_BASEDIR = [ FixPath $(LIBPHIL_BASEDIR) ] ;
LIBPHIL_CWD ?= $(LIBPHIL_BASEDIR)/src ;
LIBPHIL_CWD = [ FixPath $(LIBPHIL_CWD) ] ;

## ================================================================================================
## Give defaults to variables that might be customized on the command line
## ================================================================================================
LIBPHIL_TARGETPLAT ?= winvs ;
LIBPHIL_BUILDTYPE ?= debug ;

## ================================================================================================
## Rule to set various global variables according to the current working directory
## ================================================================================================
rule ChangeCWD {
    LIBPHIL_RELCWD = [ MakeRelative $(LIBPHIL_CWD) : $(LIBPHIL_BASEDIR) ] ;
    LIBPHIL_DIRNAME = $(LIBPHIL_CWD:B) ;

    ## -- set up the target directory for any sources we're currently dealing with
    ## -- strip "src" off the beginning if neceesary
    LIBPHIL_RELTARGDIR = [ SearchReplace $(LIBPHIL_RELCWD) : "^src/?" : "" ] ;
    LIBPHIL_TARGDIR = $(LIBPHIL_BASEDIR)/_$(LIBPHIL_TARGETPLAT)/$(LIBPHIL_BUILDTYPE) ;
    LIBPHIL_TARGDIR = $(LIBPHIL_TARGDIR)/$(LIBPHIL_RELTARGDIR) ;
    LIBPHIL_TARGDOCDIR = $(LIBPHIL_BASEDIR)/_docs/$(LIBPHIL_RELTARGDIR) ;
}

## -- invoke the rule to set these global values initially
ChangeCWD ;

## ================================================================================================
## Global variables
## ================================================================================================
LIBPHIL_PLATFORM = $(OS:L) ;
LIBPHIL_BUILDTYPES = debug release ;
LIBPHIL_JAMCORE = $(LIBPHIL_BASEDIR)/jamcore ;
LIBPHIL_INCLUDES = "$(LIBPHIL_BASEDIR)/src/libs" ;
LIBPHIL_HDRSCAN = "^[\t ]*#[\t ]*include[\t ]*[\"]([^\"]*)[\"]" ;

## ================================================================================================
## Built in jam globals
## ================================================================================================
SEARCH = $(LIBPHIL_INCLUDES) ;

## ================================================================================================
## Rules for actual dependency graph creation
## ================================================================================================

## ================================================================================================
## Create a directory (just the rule, which only needs to inform the dependency graph
## that we don't care about the modified time of the directory)
## ================================================================================================
rule CreateDirectory {
    NOUPDATE $(1) ;
}

## ================================================================================================
## Resolve a relative directory/file in a list of search directories
## ================================================================================================
rule ResolveAbsolute {
    ## -- name arguments
    local REL = $(1) ;
    local DIRS = $(2) ;

    local RESOLVED ;
    for CURRDIR in $(DIRS) {
        ## -- check each search directory to see if that's where it came from
        CURR = $(CURRDIR)/$(REL) ;

        ## -- separate the directory and file
        CURRDIR = $(CURR:D) ;
        CURR = $(CURR:BS) ;

        ## -- check to see if this file is in this directory
        RESOLVED = [ GLOB $(CURRDIR) : $(CURR) ] ;

        ## -- if that found it, we're done
        if $(RESOLVED) {
            break ;
        }
    }
    return $(RESOLVED) ;
}

## ================================================================================================
## Handle header includes
## ================================================================================================
rule HeaderRule {
    ## -- name arguments
    local INCLUDER = $(1) ;
    local INCLUDEDS = $(2) ;

    ## -- first make sure the given library has been processed, with empty entries removed
    LibraryList [ ListSubtract $(INCLUDEDS:D) : "" ] ;

    local NOTIFY = ;
    on $(INCLUDER) NOTIFY += $(LIBNOTIFYTARG) ;

    ## -- transform all the included files into absolute paths
    local CURRINC ;
    local RESOLVED ;
    for CURRINC in $(INCLUDEDS) {
        RESOLVED = [ ResolveAbsolute $(CURRINC) : $(SEARCH) ] ;

        ## -- just in case this header was included in a comment, we can't assert
        ## -- that the header actually exists.  We'll let the compiler worry about that
        if ! $(RESOLVED) {
            return ;
        }

        ## -- figure out what library this included file is part of
        local LIBDIR = $(RESOLVED:D) ;
        local LIBFILE ;
        on $(LIBDIR) LIBFILE = $(TARGET_LIBFILE) ;
        if $(LIBFILE) {
            ## -- at this point we know that RESOLVED is a file that is part of the lib LIBFILE
            ## -- files that are just part of an executable won't show up (because they never
            ## -- had a TARGET_LIBFILE associated with them)
            for CURRNTFY in $(NOTIFY) {
                on $(CURRNTFY) if ! ( $(LIBFILE) in $(NEEDEDLIBS) ) {
                    NEEDEDLIBS on $(CURRNTFY) += $(LIBFILE) ;
                    on $(CURRNTFY) if $(SHOULDDEPENDLIBS) {
                        # echo "Making " $(CURRNTFY:BS) " depend on " $(LIBFILE:BS) ;
                        Depends $(CURRNTFY) : $(LIBFILE) ;
                    }
                }
            }
        }

        ## -- make sure this included file knows to notify all the things I wanted to notify
        ## -- about needed libs
        local NOTIFYCOPY ;
        on $(RESOLVED) NOTIFYCOPY = [ ListMerge $(LIBNOTIFYTARG) : $(NOTIFY) ] ;
        LIBNOTIFYTARG on $(RESOLVED) = $(NOTIFYCOPY) ;

        ## -- deal with this resolved include
        Includes $(INCLUDER) : $(RESOLVED) ;

        ## -- and recurse into this header
        HDRSCAN on $(RESOLVED) = $(LIBPHIL_HDRSCAN) ;
        HDRRULE on $(RESOLVED) = HeaderRule ;
    }
}

## ================================================================================================
## Rule for setting up dependencies and actions for an object file
## ================================================================================================
rule ObjectList {
    ## -- name arguments
    local SOURCES = $(1) ;
    local LIBNOTIFY = $(2) ;
    local EXTRAINCLUDES = $(3) ;
    local EXTRADEFINES = $(4) ;

    ## -- get a list of object names
    local OBJECTS ;
    local SOURCE ;
    for SOURCE in $(SOURCES) {
        ## -- change the suffix and reroot the file
        local ABSSOURCE = $(LIBPHIL_CWD)/$(SOURCE) ;
        local OBJECT = $(LIBPHIL_TARGDIR)/$(SOURCE:S=".$(OBJ_SUFFIX)") ;
        Depends $(OBJECT) : $(ABSSOURCE) ;

        ## -- invoke the rule to compile the list of objects
        CompileObjectList $(OBJECT) : $(ABSSOURCE) ;

        OBJECTS += $(OBJECT) ;
    }

    ## -- then transform the whole list of sources into absolute paths
    SOURCES = $(LIBPHIL_CWD)/$(SOURCES) ;

    ## -- let these sources know who to report to as they find out libraries that they need
    LIBNOTIFYTARG on $(SOURCES) = $(LIBNOTIFY) ;

    ## -- set up scanning for header includes on our sources
    HDRSCAN on $(SOURCES) = $(LIBPHIL_HDRSCAN) ;
    HDRRULE on $(SOURCES) = HeaderRule ;

    ## -- all the objects that we want to create depend on the target directory existing
    Depends $(OBJECTS) : $(LIBPHIL_TARGDIR) ;

    ## -- invoke the rule for creating the directory
    CreateDirectory $(LIBPHIL_TARGDIR) ;

    ## -- make sure this gets built if you're building everything
    Depends all : $(OBJECTS) ;

    ## -- set up the compile options
    EXTRACCOPTS on $(OBJECTS) = [ CompileOptIncludes $(EXTRAINCLUDES) ] ;
    EXTRACCOPTS on $(OBJECTS) += [ CompileOptDefines $(EXTRADEFINES) ] ;

    return $(OBJECTS) ;
}

## ================================================================================================
## Recurse into the given absolute path
## ================================================================================================
rule RecurseInto {
    ## -- name arguments
    local DIR = $(1) ;

    ## -- only process this directory once
    on $(DIR) if $(PROCESSED) {
        return ;
    }

    ## -- we should only recurse into directories that have jamfiles
    EXISTS = [ GLOB $(DIR) : "Jamfile.jam" ] ;
    if ! $(EXISTS) {
        return ;
    }

    ## -- mark this directory as processed
    PROCESSED on $(DIR) = true ;

    ## -- backup the previous CWD
    local PREVCWD = $(LIBPHIL_CWD) ;

    ## -- change to the new CWD
    LIBPHIL_CWD = $(DIR) ;
    ChangeCWD ;

    ## -- recurse into that directory by just parsing that directory's jamfile
    include $(LIBPHIL_CWD)/Jamfile.jam ;

    ## -- reset the CWD
    LIBPHIL_CWD = $(PREVCWD) ;
    ChangeCWD ;
}

## ================================================================================================
## Rule for recursing into and processing the given list of libraries into the dependency graph
## ================================================================================================
rule LibraryList {
    ## -- name arguments
    local SHORTLIBS = $(1) ;

    local CURR ;
    local RESOLVED ;
    local RESULTS ;
    for CURR in $(SHORTLIBS) {
        ## -- resolve each library to an absolute path
        RESOLVED = [ ResolveAbsolute $(CURR) : $(SEARCH) ] ;

        if ! $(RESOLVED) {
            Exit "LibraryList: Unable to resolve " $(CURR) " from " $(SHORTLIBS) " in " $(SEARCH) ;
        }

        ## -- recurse into that library
        RecurseInto $(RESOLVED) ;

        ## -- collect the resolved names of libraries
        RESULTS += $(RESOLVED) ;
    }

    return $(RESULTS) ;
}

## ================================================================================================
## Rule for setting up dependencies and actions for a library
## ================================================================================================
rule Library {
    ## -- name all the arguments
    local SOURCES = $(1) ;

    ## -- build a library name
    LIB_FILE = $(LIBPHIL_TARGDIR).$(LIB_SUFFIX) ;

    ## -- set up the objects for our list of sources
    local OBJECTS = [ ObjectList $(SOURCES) : $(LIBPHIL_CWD) ] ;

    ## -- let jam know that this library is dependant on these objects
    Depends $(LIB_FILE) : $(OBJECTS) ;

    ## -- also add this library to the list of things to build
    Depends all : $(LIB_FILE) ;

    ## -- invoke the rule to link the library
    LinkLibrary $(LIB_FILE) : $(OBJECTS) ;

    ## -- mark this directory with the resulting library
    TARGET_LIBFILE on $(LIBPHIL_CWD) = $(LIB_FILE) ;
}

## ================================================================================================
## Rule for setting up dependencies and actions for a library
## ================================================================================================
rule Executable {
    ## -- name all the arguments
    local SOURCES = $(1) ;
    local EXTERNINCLUDES = $(2) ;
    local EXTRADEFINES = $(3) ;
    local EXTERNLIBDIRS = $(4) ;
    local EXTERNLIBS = $(5) ;

    ## -- build an executable name from the current directory name
    EXE_NAME = $(LIBPHIL_TARGDIR)/$(LIBPHIL_DIRNAME) ;
    if $(EXE_SUFFIX) {
        EXE_NAME = $(EXE_NAME).$(EXE_SUFFIX) ;
    }

    ## -- make it so that we, as a lib notification target, get set up to depend on the
    ## -- libraries that trace back to us
    SHOULDDEPENDLIBS on $(EXE_NAME) = True ;

    ## -- set up the objects for our list of sources
    local OBJECTS = [ ObjectList $(SOURCES) : $(EXE_NAME) : $(EXTERNINCLUDES) : $(EXTRADEFINES) ] ;

    ## -- let jam know that this executable depends on all the given sources and libraries
    Depends $(EXE_NAME) : $(OBJECTS) ;

    ## -- also let jam know that this executable is one of the things to build
    Depends all : $(EXE_NAME) ;

    ## -- set up the link options
    EXTRALINKOPTS on $(EXE_NAME) += [ LinkOptLibDirs $(EXTERNLIBDIRS) ] ;
    EXTRALINKOPTS on $(EXE_NAME) += [ LinkOptLibs $(EXTERNLIBS) ] ;

    ## -- invoke the rule to link the executable
    LinkExecutable $(EXE_NAME) : $(OBJECTS) ;
}

## ================================================================================================
## Simply recurse into subdirectories and process their jamfiles
## ================================================================================================
rule SubDirectories {
    ## -- name arguments
    local SUBDIRS = $(1) ;

    ## -- process each subdir in 
    local CURR ;
    for CURR in $(SUBDIRS) {
        RecurseInto $(LIBPHIL_CWD)/$(CURR) ;
    }
}

## ================================================================================================
## Utilities for automatically detecting a list of subdirectories and source
## ================================================================================================
rule SourceList {
    local RESULT = [ GLOB $(LIBPHIL_CWD) : "*.cpp" ] ;
    return $(RESULT:BS) ;
}

rule SubDirectoryList {
    local RESULT = [ GLOB $(LIBPHIL_CWD) : "[^.]*" ] ;
    RESULT = [ GLOB $(RESULT) : "Jamfile.jam" ] ;
    RESULT = $(RESULT:D) ;
    return $(RESULT:B) ;
}

## ================================================================================================
## Do some validation on the desired platform, target platform and build target
## ================================================================================================
rule VerifyEnv {
    local FILES ;
    local CURR ;

    local PLATFORMS ;
    FILES = [ GLOB $(LIBPHIL_JAMCORE) : "Jamplat_*.jam" ] ;
    for CURR in $(FILES) {
        CURR = [ MATCH ".*Jamplat_(.*).jam" : $(CURR) ] ;
        if $(CURR) {
            PLATFORMS += $(CURR[1]) ;
        }
    }
    if ! ( $(LIBPHIL_PLATFORM) in $(PLATFORMS) ) {
        Echo "Unsupported platform : " $(LIBPHIL_PLATFORM) ;
        Exit "Should be one of     : " $(PLATFORMS) ;
    }

    local TARGETPLATS ;
    FILES = [ GLOB $(LIBPHIL_JAMCORE) : "Jamtarg_*.jam" ] ;
    for CURR in $(FILES) {
        CURR = [ MATCH ".*Jamtarg_(.*).jam" : $(CURR) ] ;
        if $(CURR) {
            TARGETPLATS += $(CURR[1]) ;
        }
    }
    if ! ( $(LIBPHIL_TARGETPLAT) in $(TARGETPLATS) ) {
        Echo "Unsupported target platform : " $(LIBPHIL_TARGETPLAT) ;
        Exit "Should be one of            : " $(TARGETPLATS) ;
    }

    if ! ( $(LIBPHIL_BUILDTYPE) in $(LIBPHIL_BUILDTYPES) ) {
        Echo "Unsupported build type : " $(LIBPHIL_BUILDTYPE) ;
        Exit "Should be one of       : " $(LIBPHIL_BUILDTYPES) ;
    }
}
VerifyEnv ;

## ================================================================================================
## Tell the user what exactly is being built
## ================================================================================================
Echo "Building Platform        : $(LIBPHIL_PLATFORM)" ;
Echo "         Target Platform : $(LIBPHIL_TARGETPLAT)" ;
Echo "         Build Type      : $(LIBPHIL_BUILDTYPE)" ;

## ================================================================================================
## Include the appropriate setting-specific jam files and finally include the Jamfile
## ================================================================================================
include $(LIBPHIL_JAMCORE)/Jambase_tex.jam ;
include $(LIBPHIL_JAMCORE)/Jamplat_$(LIBPHIL_PLATFORM).jam ;
include $(LIBPHIL_JAMCORE)/Jamtarg_$(LIBPHIL_TARGETPLAT).jam ;

## ================================================================================================
## Set up the build type specific defines
## ================================================================================================
CCOPTS ?= ;
if ( $(LIBPHIL_BUILDTYPE) = debug ) {
    CCOPTS += [ CompileOptDefines Debug_=1 Release_=0 ] ;
}
else if ( $(LIBPHIL_BUILDTYPE) = release ) {
    CCOPTS += [ CompileOptDefines Debug_=0 Release_=1 ] ;
}

## ================================================================================================
## Finally include the jamfile for the current directory
## ================================================================================================
include $(LIBPHIL_CWD)/Jamfile.jam ;

